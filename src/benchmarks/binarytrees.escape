/**
 * How escape-c should look.
 *
 * Vim config:
 *  :set filetype=c
 *  :syn keyword cStatement local let new
 *  :syn keyword cStructure ref
 */

// TODO: Generating C struct for both stack and GC allocation.
struct tree_node {
   tree_node left_node;
   tree_node right_node;
};

// TODO: Must return ref type? How to now allocation type?
// TODO: Not allowed to return pointer to stack allocation? Only if it doesn't escape?
&tree_node make(int d) {
    if (d == 0) {
        return new tree_node {
            null,
            null
        };
    } else {
        return new tree_node {
            make(d - 1),
            make(d - 1)
        }
    }
l

// TODO: Can I make check() work on both stack and GC trees?
// TODO: ref == must be GC; no ref == can be both stack and GC? (Still a pointer)
int check(tree_node &node) {
    if (node == null) {
        return 0;
    } else {
        // TODO: node.left_node implied pointer?
        return 1 + check(node.left_node) + check(node.right_node);
    }
}

local min_depth = 4;
local max_depth = 10;
local stretch_depth = max_depth + 1;

invoke() {
}

int main() {
    local max_depth = 10;
    let long_lived_tree = make(max_depth);
}
